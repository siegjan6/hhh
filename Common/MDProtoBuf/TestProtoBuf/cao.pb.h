// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cao.proto

#ifndef PROTOBUF_cao_2eproto__INCLUDED
#define PROTOBUF_cao_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cao_2eproto();
void protobuf_AssignDesc_cao_2eproto();
void protobuf_ShutdownFile_cao_2eproto();

class helloworld;
class helloworld_RTDB;
class helloworld_testHw;

// ===================================================================

class helloworld_RTDB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lm.helloworld.RTDB) */ {
 public:
  helloworld_RTDB();
  virtual ~helloworld_RTDB();

  helloworld_RTDB(const helloworld_RTDB& from);

  inline helloworld_RTDB& operator=(const helloworld_RTDB& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const helloworld_RTDB& default_instance();

  void Swap(helloworld_RTDB* other);

  // implements Message ----------------------------------------------

  inline helloworld_RTDB* New() const { return New(NULL); }

  helloworld_RTDB* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const helloworld_RTDB& from);
  void MergeFrom(const helloworld_RTDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(helloworld_RTDB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  const ::std::string& a() const;
  void set_a(const ::std::string& value);
  void set_a(const char* value);
  void set_a(const char* value, size_t size);
  ::std::string* mutable_a();
  ::std::string* release_a();
  void set_allocated_a(::std::string* a);

  // optional float b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  float b() const;
  void set_b(float value);

  // optional double c = 3;
  void clear_c();
  static const int kCFieldNumber = 3;
  double c() const;
  void set_c(double value);

  // optional int32 d = 4;
  void clear_d();
  static const int kDFieldNumber = 4;
  ::google::protobuf::int32 d() const;
  void set_d(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lm.helloworld.RTDB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr a_;
  double c_;
  float b_;
  ::google::protobuf::int32 d_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cao_2eproto();
  friend void protobuf_AssignDesc_cao_2eproto();
  friend void protobuf_ShutdownFile_cao_2eproto();

  void InitAsDefaultInstance();
  static helloworld_RTDB* default_instance_;
};
// -------------------------------------------------------------------

class helloworld_testHw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lm.helloworld.testHw) */ {
 public:
  helloworld_testHw();
  virtual ~helloworld_testHw();

  helloworld_testHw(const helloworld_testHw& from);

  inline helloworld_testHw& operator=(const helloworld_testHw& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const helloworld_testHw& default_instance();

  void Swap(helloworld_testHw* other);

  // implements Message ----------------------------------------------

  inline helloworld_testHw* New() const { return New(NULL); }

  helloworld_testHw* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const helloworld_testHw& from);
  void MergeFrom(const helloworld_testHw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(helloworld_testHw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lm.helloworld hw = 1;
  int hw_size() const;
  void clear_hw();
  static const int kHwFieldNumber = 1;
  const ::lm::helloworld& hw(int index) const;
  ::lm::helloworld* mutable_hw(int index);
  ::lm::helloworld* add_hw();
  ::google::protobuf::RepeatedPtrField< ::lm::helloworld >*
      mutable_hw();
  const ::google::protobuf::RepeatedPtrField< ::lm::helloworld >&
      hw() const;

  // @@protoc_insertion_point(class_scope:lm.helloworld.testHw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::lm::helloworld > hw_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cao_2eproto();
  friend void protobuf_AssignDesc_cao_2eproto();
  friend void protobuf_ShutdownFile_cao_2eproto();

  void InitAsDefaultInstance();
  static helloworld_testHw* default_instance_;
};
// -------------------------------------------------------------------

class helloworld : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lm.helloworld) */ {
 public:
  helloworld();
  virtual ~helloworld();

  helloworld(const helloworld& from);

  inline helloworld& operator=(const helloworld& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const helloworld& default_instance();

  void Swap(helloworld* other);

  // implements Message ----------------------------------------------

  inline helloworld* New() const { return New(NULL); }

  helloworld* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const helloworld& from);
  void MergeFrom(const helloworld& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(helloworld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef helloworld_RTDB RTDB;
  typedef helloworld_testHw testHw;

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string str = 2;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // repeated .lm.helloworld.RTDB rtdb = 3;
  int rtdb_size() const;
  void clear_rtdb();
  static const int kRtdbFieldNumber = 3;
  const ::lm::helloworld_RTDB& rtdb(int index) const;
  ::lm::helloworld_RTDB* mutable_rtdb(int index);
  ::lm::helloworld_RTDB* add_rtdb();
  ::google::protobuf::RepeatedPtrField< ::lm::helloworld_RTDB >*
      mutable_rtdb();
  const ::google::protobuf::RepeatedPtrField< ::lm::helloworld_RTDB >&
      rtdb() const;

  // optional bytes str2 = 4;
  void clear_str2();
  static const int kStr2FieldNumber = 4;
  const ::std::string& str2() const;
  void set_str2(const ::std::string& value);
  void set_str2(const char* value);
  void set_str2(const void* value, size_t size);
  ::std::string* mutable_str2();
  ::std::string* release_str2();
  void set_allocated_str2(::std::string* str2);

  // @@protoc_insertion_point(class_scope:lm.helloworld)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::RepeatedPtrField< ::lm::helloworld_RTDB > rtdb_;
  ::google::protobuf::internal::ArenaStringPtr str2_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cao_2eproto();
  friend void protobuf_AssignDesc_cao_2eproto();
  friend void protobuf_ShutdownFile_cao_2eproto();

  void InitAsDefaultInstance();
  static helloworld* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// helloworld_RTDB

// optional string a = 1;
inline void helloworld_RTDB::clear_a() {
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& helloworld_RTDB::a() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.RTDB.a)
  return a_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void helloworld_RTDB::set_a(const ::std::string& value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lm.helloworld.RTDB.a)
}
inline void helloworld_RTDB::set_a(const char* value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lm.helloworld.RTDB.a)
}
inline void helloworld_RTDB::set_a(const char* value, size_t size) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lm.helloworld.RTDB.a)
}
inline ::std::string* helloworld_RTDB::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:lm.helloworld.RTDB.a)
  return a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* helloworld_RTDB::release_a() {
  // @@protoc_insertion_point(field_release:lm.helloworld.RTDB.a)
  
  return a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void helloworld_RTDB::set_allocated_a(::std::string* a) {
  if (a != NULL) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:lm.helloworld.RTDB.a)
}

// optional float b = 2;
inline void helloworld_RTDB::clear_b() {
  b_ = 0;
}
inline float helloworld_RTDB::b() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.RTDB.b)
  return b_;
}
inline void helloworld_RTDB::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:lm.helloworld.RTDB.b)
}

// optional double c = 3;
inline void helloworld_RTDB::clear_c() {
  c_ = 0;
}
inline double helloworld_RTDB::c() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.RTDB.c)
  return c_;
}
inline void helloworld_RTDB::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:lm.helloworld.RTDB.c)
}

// optional int32 d = 4;
inline void helloworld_RTDB::clear_d() {
  d_ = 0;
}
inline ::google::protobuf::int32 helloworld_RTDB::d() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.RTDB.d)
  return d_;
}
inline void helloworld_RTDB::set_d(::google::protobuf::int32 value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:lm.helloworld.RTDB.d)
}

// -------------------------------------------------------------------

// helloworld_testHw

// repeated .lm.helloworld hw = 1;
inline int helloworld_testHw::hw_size() const {
  return hw_.size();
}
inline void helloworld_testHw::clear_hw() {
  hw_.Clear();
}
inline const ::lm::helloworld& helloworld_testHw::hw(int index) const {
  // @@protoc_insertion_point(field_get:lm.helloworld.testHw.hw)
  return hw_.Get(index);
}
inline ::lm::helloworld* helloworld_testHw::mutable_hw(int index) {
  // @@protoc_insertion_point(field_mutable:lm.helloworld.testHw.hw)
  return hw_.Mutable(index);
}
inline ::lm::helloworld* helloworld_testHw::add_hw() {
  // @@protoc_insertion_point(field_add:lm.helloworld.testHw.hw)
  return hw_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lm::helloworld >*
helloworld_testHw::mutable_hw() {
  // @@protoc_insertion_point(field_mutable_list:lm.helloworld.testHw.hw)
  return &hw_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lm::helloworld >&
helloworld_testHw::hw() const {
  // @@protoc_insertion_point(field_list:lm.helloworld.testHw.hw)
  return hw_;
}

// -------------------------------------------------------------------

// helloworld

// optional int32 id = 1;
inline void helloworld::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 helloworld::id() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.id)
  return id_;
}
inline void helloworld::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lm.helloworld.id)
}

// optional string str = 2;
inline void helloworld::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& helloworld::str() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void helloworld::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lm.helloworld.str)
}
inline void helloworld::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lm.helloworld.str)
}
inline void helloworld::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lm.helloworld.str)
}
inline ::std::string* helloworld::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:lm.helloworld.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* helloworld::release_str() {
  // @@protoc_insertion_point(field_release:lm.helloworld.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void helloworld::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:lm.helloworld.str)
}

// repeated .lm.helloworld.RTDB rtdb = 3;
inline int helloworld::rtdb_size() const {
  return rtdb_.size();
}
inline void helloworld::clear_rtdb() {
  rtdb_.Clear();
}
inline const ::lm::helloworld_RTDB& helloworld::rtdb(int index) const {
  // @@protoc_insertion_point(field_get:lm.helloworld.rtdb)
  return rtdb_.Get(index);
}
inline ::lm::helloworld_RTDB* helloworld::mutable_rtdb(int index) {
  // @@protoc_insertion_point(field_mutable:lm.helloworld.rtdb)
  return rtdb_.Mutable(index);
}
inline ::lm::helloworld_RTDB* helloworld::add_rtdb() {
  // @@protoc_insertion_point(field_add:lm.helloworld.rtdb)
  return rtdb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lm::helloworld_RTDB >*
helloworld::mutable_rtdb() {
  // @@protoc_insertion_point(field_mutable_list:lm.helloworld.rtdb)
  return &rtdb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lm::helloworld_RTDB >&
helloworld::rtdb() const {
  // @@protoc_insertion_point(field_list:lm.helloworld.rtdb)
  return rtdb_;
}

// optional bytes str2 = 4;
inline void helloworld::clear_str2() {
  str2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& helloworld::str2() const {
  // @@protoc_insertion_point(field_get:lm.helloworld.str2)
  return str2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void helloworld::set_str2(const ::std::string& value) {
  
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lm.helloworld.str2)
}
inline void helloworld::set_str2(const char* value) {
  
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lm.helloworld.str2)
}
inline void helloworld::set_str2(const void* value, size_t size) {
  
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lm.helloworld.str2)
}
inline ::std::string* helloworld::mutable_str2() {
  
  // @@protoc_insertion_point(field_mutable:lm.helloworld.str2)
  return str2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* helloworld::release_str2() {
  // @@protoc_insertion_point(field_release:lm.helloworld.str2)
  
  return str2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void helloworld::set_allocated_str2(::std::string* str2) {
  if (str2 != NULL) {
    
  } else {
    
  }
  str2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:lm.helloworld.str2)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cao_2eproto__INCLUDED
